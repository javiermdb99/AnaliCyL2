install.packages("ggplot2")
install.packages("plotly")
install.packages(c("cli", "curl", "htmltools", "htmlwidgets", "isoband", "later", "nlme", "openssl", "pillar", "R6", "Rcpp", "survival", "tibble", "utf8"))
install.packages(c("gert", "pkgload", "waldo", "xfun"))
library(installr)
updateR()
install.packages(c("cpp11", "digest", "gert", "lattice", "lifecycle", "mgcv", "pillar", "R.utils", "xfun", "XML"))
?aes
?ggplot2::aes
?ggplot2::geom_bar
12/2+c(-1,1)*1.96*sqrt(12)/2
6-12/2/(sqrt(12)/2)
pnorm(.95)
pnorm(.975)
qnorm(.95)
qnorm(.975)
6-12/2
6-12/2/(sqrt(12)/2)
(6-12/2)/(sqrt(12)/2)
gente <- sample(1:365, 25, replace = T)
gente
hay <- any(duplicated(gente))
duplicated(gente)
repeticiones <- replicate(100, paradoja(23))
paradoja <- function(cantidad)
{
gente <- sample(1:365, cantidad, replace = T)
hay <- any(duplicated(gente))
return(hay)
}
repeticiones <- replicate(100, paradoja(23))
probabilidad <- cumsum(repeticiones)/1:100
probabilidad
?plot
plot(repeticiones, probabilidad, xlab="repeticiones", ylab="probabilidad acumulada")
plot(1:vecess, probabilidad, xlab="repeticiones", ylab="probabilidad acumulada")
plot(1:veces, probabilidad, xlab="repeticiones", ylab="probabilidad acumulada")
veces <- 100
repeticiones <- replicate(veces, paradoja(23))
probabilidad <- cumsum(repeticiones)/1:veces
plot(1:veces, probabilidad, xlab="repeticiones", ylab="probabilidad acumulada")
plot(1:veces, probabilidad, xlab="repeticiones", ylab="probabilidad acumulada", type = "l")
plot(1:veces, probabilidad, xlab="repeticiones", ylab="probabilidad acumulada",
type = "l", ylim = c(0, 1))
?plot
axis(side=2, at=0.5)
plot(1:veces, probabilidad, xlab="repeticiones", ylab="probabilidad acumulada",
type = "l", ylim = c(0, 1), yaxp=c(0, 1, .5))
plot(1:veces, probabilidad, xlab="repeticiones", ylab="probabilidad acumulada",
type = "l", ylim = c(0, 1), yaxt = F)
plot(1:veces, probabilidad, xlab="repeticiones", ylab="probabilidad acumulada",
type = "l", ylim = c(0, 1), yaxt = "n")
axis(side=2, at0.5)
axis(side=2, at=0.5)
abline(h=0.5, lty=2)
paradoja <- function(cantidad)
{
gente <- sample(1:365, cantidad, replace = T)
hay <- any(duplicated(gente))
return(hay)
}
veces <- 200
repeticiones <- replicate(veces, paradoja(23))
probabilidad <- cumsum(repeticiones)/1:veces
plot(1:veces, probabilidad, xlab="repeticiones", ylab="probabilidad acumulada",
type = "l", ylim = c(0, 1), yaxt = "n")
axis(side=2, at=0.5)
abline(h=0.5, lty=2)
plot(1:veces, probabilidad, xlab="repeticiones", ylab="probabilidad acumulada",
type = "l", ylim = c(0, 1), yaxt = "n", title="Paradoja del cumpleaños")
plot(1:veces, probabilidad, xlab="repeticiones", ylab="probabilidad acumulada",
type = "l", ylim = c(0, 1), yaxt = "n", main="Paradoja del cumpleaños")
axis(side=2, at=0.5)
abline(h=0.5, lty=2)
axis(side=2, at=c(0, .5, 1))
paradoja <- function(cantidad)
{
gente <- sample(1:365, cantidad, replace = T)
hay <- any(duplicated(gente))
return(hay)
}
veces <- 200
repeticiones <- replicate(veces, paradoja(50))
probabilidad <- cumsum(repeticiones)/1:veces
plot(1:veces, probabilidad, xlab="repeticiones", ylab="probabilidad acumulada",
type = "l", ylim = c(0, 1), yaxt = "n", main="Paradoja del cumpleaños")
axis(side=2, at=c(0, .5, 1))
abline(h=0.5, lty=2)
paradoja <- function(cantidad)
{
gente <- sample(1:365, cantidad, replace = T)
hay <- any(duplicated(gente))
return(hay)
}
veces <- 200
repeticiones <- replicate(veces, paradoja(100))
probabilidad <- cumsum(repeticiones)/1:veces
plot(1:veces, probabilidad, xlab="repeticiones", ylab="probabilidad acumulada",
type = "l", ylim = c(0, 1), yaxt = "n", main="Paradoja del cumpleaños")
axis(side=2, at=c(0, .5, 1))
abline(h=0.5, lty=2)
paradoja <- function(cantidad)
{
gente <- sample(1:365, cantidad, replace = T)
hay <- any(duplicated(gente))
return(hay)
}
veces <- 200
repeticiones <- replicate(veces, paradoja(10))
probabilidad <- cumsum(repeticiones)/1:veces
plot(1:veces, probabilidad, xlab="repeticiones", ylab="probabilidad acumulada",
type = "l", ylim = c(0, 1), yaxt = "n", main="Paradoja del cumpleaños")
axis(side=2, at=c(0, .5, 1))
abline(h=0.5, lty=2)
plot(1:veces, probabilidad, xlab="repeticiones", ylab="probabilidad estimada",
type = "l", ylim = c(0, 1), yaxt = "n", main="Paradoja del cumpleaños")
axis(side=2, at=c(0, .5, 1))
abline(h=0.5, lty=2)
paradoja <- function(cantidad)
{
gente <- sample(1:365, cantidad, replace = T)
hay <- any(duplicated(gente))
return(hay)
}
veces <- 200
repeticiones <- replicate(veces, paradoja(23))
probabilidad <- cumsum(repeticiones)/1:veces
plot(1:veces, probabilidad, xlab="repeticiones", ylab="probabilidad estimada",
type = "l", ylim = c(0, 1), yaxt = "n", main="Paradoja del cumpleaños")
axis(side=2, at=c(0, .5, 1))
abline(h=0.5, lty=2)
veces <- 5000
repeticiones <- replicate(veces, paradoja(23))
probabilidad <- cumsum(repeticiones)/1:veces
plot(1:veces, probabilidad, xlab="repeticiones", ylab="probabilidad estimada",
type = "l", ylim = c(0, 1), yaxt = "n", main="Paradoja del cumpleaños")
axis(side=2, at=c(0, .5, 1))
abline(h=0.5, lty=2)
paradoja <- function(cantidad)
{
gente <- sample(1:365, cantidad, replace = T)
hay <- any(duplicated(gente))
return(hay)
}
veces <- 500
repeticiones <- replicate(veces, paradoja(9))
probabilidad <- cumsum(repeticiones)/1:veces
plot(1:veces, probabilidad, xlab="repeticiones", ylab="probabilidad estimada",
type = "l", ylim = c(0, 1), yaxt = "n", main="Paradoja del cumpleaños")
axis(side=2, at=c(0, .5, 1))
abline(h=0.5, lty=2)
tail(probabilidad)
paradoja <- function(cantidad)
{
gente <- sample(1:365, cantidad, replace = T)
hay <- any(duplicated(gente))
return(hay)
}
veces <- 500
repeticiones <- replicate(veces, paradoja(100))
probabilidad <- cumsum(repeticiones)/1:veces
plot(1:veces, probabilidad, xlab="repeticiones", ylab="probabilidad estimada",
type = "l", ylim = c(0, 1), yaxt = "n", main="Paradoja del cumpleaños")
axis(side=2, at=c(0, .5, 1))
abline(h=0.5, lty=2)
mice <- data.frame()
mice <- data.frame(
stillb=c(15,17),
total=c(297,242),
conc=c(0,62)
)
mice$resp <- cbind(mice$stillb, mice$total-mice$stillb)
mice
View(mice)
mice$resp
cbind(c(1,2), c(2,3))
rbind(c(1,2), c(2,3))
cbind(c(1,2), c(2,3))
data.frame(res=cbind(c(1,2), c(2,3)))
View(data.frame(res=cbind(c(1,2), c(2,3))))
help(offset)
?anova
install.packages(c("brio", "cli", "cpp11", "crayon", "credentials", "crosstalk", "data.table", "desc", "devtools", "diffobj", "digest", "fs", "generics", "gert", "glue", "knitr", "memoise", "mime", "pillar", "pkgbuild", "pkgload", "plotly", "rcmdcheck", "remotes", "rlang", "sessioninfo", "sp", "stringi", "testthat", "tibble", "tidyr", "tinytex", "usethis", "withr", "xfun", "xml2"))
qchisq(8.7912-8.4351, 1, lower.tail = T)
install.packages("tinytex")
system.file("examples", package = "shiny")
library(shiny)
runExample("01_Hello")
runExample("02_Text")
install.packages(c("cli", "clipr", "colorspace", "commonmark", "desc", "evaluate", "glue", "jsonlite", "klaR", "mockery", "openssl", "Rcpp", "rlang", "rmarkdown", "sf", "survival", "tidyselect", "withr", "xfun", "XML", "yaml"))
install.packages(c("cli", "clipr", "colorspace", "commonmark", "desc", "evaluate", "glue", "jsonlite", "klaR", "mockery", "openssl", "Rcpp", "rlang", "rmarkdown", "sf", "survival", "tidyselect", "withr", "xfun", "XML", "yaml"))
install.packages(c("cli", "clipr", "colorspace", "commonmark", "desc", "evaluate", "glue", "jsonlite", "klaR", "mockery", "openssl", "Rcpp", "rlang", "rmarkdown", "sf", "survival", "tidyselect", "withr", "xfun", "XML", "yaml"))
shiny::runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/EstudioElectoralCyL')
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/EstudioElectoralCyL')
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/EstudioElectoralCyL')
shiny::runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/EstudioElectoralCyL')
c(120000, 100000) %% 62400
shiny::runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/EstudioElectoralCyL')
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/EstudioElectoralCyL')
Q
Q
Q
Q
Q
shiny::runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/EstudioElectoralCyL')
shiny::runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/EstudioElectoralCyL')
datos
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/EstudioElectoralCyL')
datos
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/EstudioElectoralCyL')
datos
reparto
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/EstudioElectoralCyL')
datos
datos %>% filter(Provincia == provincia)
provincia
datos %>% filter(Provincia == "AVILA")
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/EstudioElectoralCyL')
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/EstudioElectoralCyL')
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/EstudioElectoralCyL')
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/EstudioElectoralCyL')
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/EstudioElectoralCyL')
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/EstudioElectoralCyL')
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/EstudioElectoralCyL')
shiny::runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/EstudioElectoralCyL')
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/EstudioElectoralCyL')
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/EstudioElectoralCyL')
shiny::runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/EstudioElectoralCyL')
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/EstudioElectoralCyL')
?geom_sf
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/EstudioElectoralCyL')
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/EstudioElectoralCyL')
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/EstudioElectoralCyL')
levels(datos_mapa$Colores)
datos_mapa$Colores
as.factor(datos_mapa$Colores)
unique(datos_mapa$Colores)
unique(datos_mapa$Colores)
as.factor(datos_mapa$Colores)
?arrange
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/EstudioElectoralCyL')
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/EstudioElectoralCyL')
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/EstudioElectoralCyL')
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/EstudioElectoralCyL')
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/EstudioElectoralCyL')
datos_mapa
levels(as.factor(datos_mapa$Colores))
ggplot(datos_mapa, aes(label = Partido))+ #
geom_sf(aes(fill=Partido))+
theme_minimal()+
theme(axis.ticks = element_blank(),
axis.text = element_blank(),
panel.grid = element_blank())+
scale_fill_manual(levels(as.factor(datos_mapa$Colores)))
ggplot(datos_mapa, aes(label = Partido))+ #
geom_sf(aes(fill=Partido))+
theme_minimal()+
theme(axis.ticks = element_blank(),
axis.text = element_blank(),
panel.grid = element_blank())
levels(as.factor(datos_mapa$Colores))
levels(as.factor(datos_mapa$Colores))
ggplot(datos_mapa, aes(label = Partido))+ #
geom_sf(aes(fill=Partido))+
theme_minimal()+
theme(axis.ticks = element_blank(),
axis.text = element_blank(),
panel.grid = element_blank())+
scale_fill_manual(levels(as.factor(datos_mapa$Colores)))
?scale_fill_manual
ggplot(datos_mapa, aes(label = Partido))+ #
geom_sf(aes(fill=Partido))+
theme_minimal()+
theme(axis.ticks = element_blank(),
axis.text = element_blank(),
panel.grid = element_blank())+
scale_fill_manual(values=levels(as.factor(datos_mapa$Colores)))
factor(datos_mapa)
factor(datos_mapa$Colores)
ggplot(datos_mapa, aes(label = Partido))+ #
geom_sf(aes(fill=Partido))+
theme_minimal()+
theme(axis.ticks = element_blank(),
axis.text = element_blank(),
panel.grid = element_blank())+
scale_fill_manual(values=levels(factor(datos_mapa$Colores)))
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/EstudioElectoralCyL')
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/EstudioElectoralCyL')
citation(ggplot2)
citation("ggplot2")
shiny::runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/ElecCyL')
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/ElecCyL')
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/ElecCyL')
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/ElecCyL')
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/ElecCyL')
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/ElecCyL')
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/ElecCyL')
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/ElecCyL')
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/ElecCyL')
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/ElecCyL')
shiny::runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/ElecCyL')
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/ElecCyL')
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/ElecCyL')
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/ElecCyL')
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/ElecCyL')
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/ElecCyL')
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/ElecCyL')
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/ElecCyL')
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/ElecCyL')
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/ElecCyL')
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/ElecCyL')
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/ElecCyL')
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/ElecCyL')
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/ElecCyL')
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/ElecCyL')
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/ElecCyL')
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/ElecCyL')
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/ElecCyL')
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/ElecCyL')
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/ElecCyL')
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/ElecCyL')
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/ElecCyL')
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/ElecCyL')
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/ElecCyL')
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/ElecCyL')
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/ElecCyL')
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/ElecCyL')
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/ElecCyL')
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/ElecCyL')
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/ElecCyL')
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/ElecCyL')
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/ElecCyL')
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/ElecCyL')
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/ElecCyL')
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/ElecCyL')
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/ElecCyL')
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/ElecCyL')
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/ElecCyL')
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/ElecCyL')
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/ElecCyL')
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/ElecCyL')
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/ElecCyL')
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/ElecCyL')
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/ElecCyL')
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/ElecCyL')
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/ElecCyL')
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/ElecCyL')
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/ElecCyL')
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/ElecCyL')
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/ElecCyL')
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/ElecCyL')
setwd("~/OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/ElecCyL")
install.packages("tidyverse")
install.packages("ggparliament")
install.packages("ggplot2")
?read.table
setwd("~/OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/ElecCyL")
# Esta función limpia de acentos el dataframe que se ha pasado como argumento,
# así como normaliza los nombres de los partidos a los nombres más conocidos a nivel
# estatal y autonómico
clean <- function(df) {
df$Partido <- factor(gsub('\\.', "", df$Partido))
df$Censo <- as.integer(gsub('\\.', "", as.character(df$Censo)))
df$Provincia <- gsub('Á', 'A', as.character(df$Provincia))
df$Provincia <- gsub('É', 'E', as.character(df$Provincia))
df$Provincia <- gsub('Í', 'I', as.character(df$Provincia))
df$Provincia <- gsub('Ó', 'O', as.character(df$Provincia))
df$Provincia <- gsub('Ú', 'U', as.character(df$Provincia))
df$Municipio <- gsub('Á', 'A', as.character(df$Municipio))
df$Municipio <- gsub('É', 'E', as.character(df$Municipio))
df$Municipio <- gsub('Í', 'I', as.character(df$Municipio))
df$Municipio <- gsub('Ó', 'O', as.character(df$Municipio))
df$Municipio <- gsub('Ú', 'U', as.character(df$Municipio))
df$Partido <-
as.factor(gsub('ñ', 'n', as.character(df$Partido)))
df$Partido <-
as.factor(gsub('Ñ', 'N', as.character(df$Partido)))
df$Partido <-
as.factor(gsub(' ', '', as.character(df$Partido)))
df$Partido <-
as.factor(gsub(
'.*PODEMOS.*',
'Podemos',
as.character(df$Partido),
ignore.case = T
))
df$Partido <-
as.factor(gsub('.*IU.*', 'IU', as.character(df$Partido)))
df$Partido <-
as.factor(gsub('.*PNC.*', 'PNC', as.character(df$Partido), ignore.case = T))
df$Partido <-
as.factor(gsub('APB.*', 'APB', as.character(df$Partido))) # cuidado
df$Partido <-
as.factor(gsub('AP-.*', 'AP', as.character(df$Partido)))
df$Partido <-
as.factor(gsub('AP', 'AP', as.character(df$Partido)))
df$Partido <-
as.factor(gsub('.*PSOE.*', 'PSOE', as.character(df$Partido)))
df$Partido <-
as.factor(gsub('.*PREPAL.*', 'PREPAL', as.character(df$Partido)))
df$Partido <-
as.factor(gsub('.*PCE.*', 'PCE', as.character(df$Partido)))
df$Partido <-
as.factor(gsub('.*TC.*', 'PCAS', as.character(df$Partido)))
df$Partido <-
as.factor(gsub('.*PCAL.*', 'PCAS', as.character(df$Partido)))
df$Partido <-
as.factor(gsub('.*UPSA.*', 'UPSa', as.character(df$Partido)))
df$Partido <-
as.factor(gsub('.*PTE.*', 'PTE', as.character(df$Partido)))
df$Partido <-
as.factor(gsub('.*URCL.*', 'URCL', as.character(df$Partido)))
df$Partido <-
as.factor(gsub('.*CDS.*', 'CDS', as.character(df$Partido)))
return(df)
}
# como cambia según la entrada, esta función sirve para leer los datos y devolver
# los datos limpios
read_and_clean <- function(n_datos) {
datos <-
read.table(
paste("./resultados/", n_datos, ".csv", sep=""),
header = T,
sep = ";",
dec = ",",
stringsAsFactors = T
)
datos <- clean(datos)
write.table(
datos,
file = paste("./resultados_limpios/", n_datos, ".csv", sep=""),
sep = ";",
quote = F,
dec = ",",
fileEncoding = "UTF-8"
)
}
anios <- as.character(c(1983, 1987, 1991, 1995, 1999, 2003, 2007, 2011, 2015, 2019, 2022))
for (i in 1:length(anios)){
read_and_clean(anios[i])
}
shiny::runApp()
runApp()
rsconnect::deployApp(".")
runApp()
rsconnect::deployApp(".")
