?plot
plot(repeticiones, probabilidad, xlab="repeticiones", ylab="probabilidad acumulada")
plot(1:vecess, probabilidad, xlab="repeticiones", ylab="probabilidad acumulada")
plot(1:veces, probabilidad, xlab="repeticiones", ylab="probabilidad acumulada")
veces <- 100
repeticiones <- replicate(veces, paradoja(23))
probabilidad <- cumsum(repeticiones)/1:veces
plot(1:veces, probabilidad, xlab="repeticiones", ylab="probabilidad acumulada")
plot(1:veces, probabilidad, xlab="repeticiones", ylab="probabilidad acumulada", type = "l")
plot(1:veces, probabilidad, xlab="repeticiones", ylab="probabilidad acumulada",
type = "l", ylim = c(0, 1))
?plot
axis(side=2, at=0.5)
plot(1:veces, probabilidad, xlab="repeticiones", ylab="probabilidad acumulada",
type = "l", ylim = c(0, 1), yaxp=c(0, 1, .5))
plot(1:veces, probabilidad, xlab="repeticiones", ylab="probabilidad acumulada",
type = "l", ylim = c(0, 1), yaxt = F)
plot(1:veces, probabilidad, xlab="repeticiones", ylab="probabilidad acumulada",
type = "l", ylim = c(0, 1), yaxt = "n")
axis(side=2, at0.5)
axis(side=2, at=0.5)
abline(h=0.5, lty=2)
paradoja <- function(cantidad)
{
gente <- sample(1:365, cantidad, replace = T)
hay <- any(duplicated(gente))
return(hay)
}
veces <- 200
repeticiones <- replicate(veces, paradoja(23))
probabilidad <- cumsum(repeticiones)/1:veces
plot(1:veces, probabilidad, xlab="repeticiones", ylab="probabilidad acumulada",
type = "l", ylim = c(0, 1), yaxt = "n")
axis(side=2, at=0.5)
abline(h=0.5, lty=2)
plot(1:veces, probabilidad, xlab="repeticiones", ylab="probabilidad acumulada",
type = "l", ylim = c(0, 1), yaxt = "n", title="Paradoja del cumpleaños")
plot(1:veces, probabilidad, xlab="repeticiones", ylab="probabilidad acumulada",
type = "l", ylim = c(0, 1), yaxt = "n", main="Paradoja del cumpleaños")
axis(side=2, at=0.5)
abline(h=0.5, lty=2)
axis(side=2, at=c(0, .5, 1))
paradoja <- function(cantidad)
{
gente <- sample(1:365, cantidad, replace = T)
hay <- any(duplicated(gente))
return(hay)
}
veces <- 200
repeticiones <- replicate(veces, paradoja(50))
probabilidad <- cumsum(repeticiones)/1:veces
plot(1:veces, probabilidad, xlab="repeticiones", ylab="probabilidad acumulada",
type = "l", ylim = c(0, 1), yaxt = "n", main="Paradoja del cumpleaños")
axis(side=2, at=c(0, .5, 1))
abline(h=0.5, lty=2)
paradoja <- function(cantidad)
{
gente <- sample(1:365, cantidad, replace = T)
hay <- any(duplicated(gente))
return(hay)
}
veces <- 200
repeticiones <- replicate(veces, paradoja(100))
probabilidad <- cumsum(repeticiones)/1:veces
plot(1:veces, probabilidad, xlab="repeticiones", ylab="probabilidad acumulada",
type = "l", ylim = c(0, 1), yaxt = "n", main="Paradoja del cumpleaños")
axis(side=2, at=c(0, .5, 1))
abline(h=0.5, lty=2)
paradoja <- function(cantidad)
{
gente <- sample(1:365, cantidad, replace = T)
hay <- any(duplicated(gente))
return(hay)
}
veces <- 200
repeticiones <- replicate(veces, paradoja(10))
probabilidad <- cumsum(repeticiones)/1:veces
plot(1:veces, probabilidad, xlab="repeticiones", ylab="probabilidad acumulada",
type = "l", ylim = c(0, 1), yaxt = "n", main="Paradoja del cumpleaños")
axis(side=2, at=c(0, .5, 1))
abline(h=0.5, lty=2)
plot(1:veces, probabilidad, xlab="repeticiones", ylab="probabilidad estimada",
type = "l", ylim = c(0, 1), yaxt = "n", main="Paradoja del cumpleaños")
axis(side=2, at=c(0, .5, 1))
abline(h=0.5, lty=2)
paradoja <- function(cantidad)
{
gente <- sample(1:365, cantidad, replace = T)
hay <- any(duplicated(gente))
return(hay)
}
veces <- 200
repeticiones <- replicate(veces, paradoja(23))
probabilidad <- cumsum(repeticiones)/1:veces
plot(1:veces, probabilidad, xlab="repeticiones", ylab="probabilidad estimada",
type = "l", ylim = c(0, 1), yaxt = "n", main="Paradoja del cumpleaños")
axis(side=2, at=c(0, .5, 1))
abline(h=0.5, lty=2)
veces <- 5000
repeticiones <- replicate(veces, paradoja(23))
probabilidad <- cumsum(repeticiones)/1:veces
plot(1:veces, probabilidad, xlab="repeticiones", ylab="probabilidad estimada",
type = "l", ylim = c(0, 1), yaxt = "n", main="Paradoja del cumpleaños")
axis(side=2, at=c(0, .5, 1))
abline(h=0.5, lty=2)
paradoja <- function(cantidad)
{
gente <- sample(1:365, cantidad, replace = T)
hay <- any(duplicated(gente))
return(hay)
}
veces <- 500
repeticiones <- replicate(veces, paradoja(9))
probabilidad <- cumsum(repeticiones)/1:veces
plot(1:veces, probabilidad, xlab="repeticiones", ylab="probabilidad estimada",
type = "l", ylim = c(0, 1), yaxt = "n", main="Paradoja del cumpleaños")
axis(side=2, at=c(0, .5, 1))
abline(h=0.5, lty=2)
tail(probabilidad)
paradoja <- function(cantidad)
{
gente <- sample(1:365, cantidad, replace = T)
hay <- any(duplicated(gente))
return(hay)
}
veces <- 500
repeticiones <- replicate(veces, paradoja(100))
probabilidad <- cumsum(repeticiones)/1:veces
plot(1:veces, probabilidad, xlab="repeticiones", ylab="probabilidad estimada",
type = "l", ylim = c(0, 1), yaxt = "n", main="Paradoja del cumpleaños")
axis(side=2, at=c(0, .5, 1))
abline(h=0.5, lty=2)
mice <- data.frame()
mice <- data.frame(
stillb=c(15,17),
total=c(297,242),
conc=c(0,62)
)
mice$resp <- cbind(mice$stillb, mice$total-mice$stillb)
mice
View(mice)
mice$resp
cbind(c(1,2), c(2,3))
rbind(c(1,2), c(2,3))
cbind(c(1,2), c(2,3))
data.frame(res=cbind(c(1,2), c(2,3)))
View(data.frame(res=cbind(c(1,2), c(2,3))))
help(offset)
?anova
install.packages(c("brio", "cli", "cpp11", "crayon", "credentials", "crosstalk", "data.table", "desc", "devtools", "diffobj", "digest", "fs", "generics", "gert", "glue", "knitr", "memoise", "mime", "pillar", "pkgbuild", "pkgload", "plotly", "rcmdcheck", "remotes", "rlang", "sessioninfo", "sp", "stringi", "testthat", "tibble", "tidyr", "tinytex", "usethis", "withr", "xfun", "xml2"))
qchisq(8.7912-8.4351, 1, lower.tail = T)
install.packages("tinytex")
system.file("examples", package = "shiny")
library(shiny)
runExample("01_Hello")
runExample("02_Text")
install.packages(c("cli", "clipr", "colorspace", "commonmark", "desc", "evaluate", "glue", "jsonlite", "klaR", "mockery", "openssl", "Rcpp", "rlang", "rmarkdown", "sf", "survival", "tidyselect", "withr", "xfun", "XML", "yaml"))
install.packages(c("cli", "clipr", "colorspace", "commonmark", "desc", "evaluate", "glue", "jsonlite", "klaR", "mockery", "openssl", "Rcpp", "rlang", "rmarkdown", "sf", "survival", "tidyselect", "withr", "xfun", "XML", "yaml"))
install.packages(c("cli", "clipr", "colorspace", "commonmark", "desc", "evaluate", "glue", "jsonlite", "klaR", "mockery", "openssl", "Rcpp", "rlang", "rmarkdown", "sf", "survival", "tidyselect", "withr", "xfun", "XML", "yaml"))
shiny::runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/EstudioElectoralCyL')
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/EstudioElectoralCyL')
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/EstudioElectoralCyL')
shiny::runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/EstudioElectoralCyL')
c(120000, 100000) %% 62400
shiny::runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/EstudioElectoralCyL')
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/EstudioElectoralCyL')
provincia
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/EstudioElectoralCyL')
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/EstudioElectoralCyL')
library(shiny)
runApp()
runApp()
runApp()
setwd("~/OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/EstudioElectoralCyL")
setwd("~/OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/EstudioElectoralCyL")
runApp()
force(datos)
View(datos)
write.table(datos, file="Datos_bn.txt", sep="\t")
read.table("Datos_bn.txt")
datos <- read.table("Datos_bn.txt")
View(datos)
datos %>%
group_by(Provincia, Municipio) %>% mutate(PorcMuni = VotosMuni/sum(VotosMuni)*100) %>%
group_by(Provincia, Partido) %>% mutate(Votos = sum(VotosMuni)) %>%
ungroup(Partido) %>% mutate(Porc = Votos/sum(VotosMuni) * 100) %>%
group_by(Partido) %>% mutate(VotosCCAA = sum(VotosMuni)) %>%
ungroup() %>% mutate(PorcCCAA = VotosCCAA/sum(VotosMuni)*100)
prov <- datos %>%
group_by(Provincia, Municipio) %>% mutate(PorcMuni = VotosMuni/sum(VotosMuni)*100) %>%
group_by(Provincia, Partido) %>% mutate(Votos = sum(VotosMuni)) %>%
ungroup(Partido) %>% mutate(Porc = Votos/sum(VotosMuni) * 100) %>%
group_by(Partido) %>% mutate(VotosCCAA = sum(VotosMuni)) %>%
ungroup() %>% mutate(PorcCCAA = VotosCCAA/sum(VotosMuni)*100)
votos <- datos %>% group_by(Partido) %>%
select(Partido, VotosCCAA, PorcCCAA) %>% distinct() %>% ungroup() %>%
filter(PorcCCAA > min_threshold) %>% rename(Votos = VotosCCAA, Porc = PorcCCAA)
votos <- prov %>% group_by(Partido) %>%
select(Partido, VotosCCAA, PorcCCAA) %>% distinct() %>% ungroup() %>%
filter(PorcCCAA > min_threshold) %>% rename(Votos = VotosCCAA, Porc = PorcCCAA)
votos <- prov %>% group_by(Partido) %>%
select(Partido, VotosCCAA, PorcCCAA) %>% distinct() %>% ungroup() %>%
rename(Votos = VotosCCAA, Porc = PorcCCAA)
View(votos)
votos <- prov %>% group_by(Partido) %>%
select(Partido, VotosCCAA, PorcCCAA) %>% distinct() %>% ungroup() %>%
rename(Votos = VotosCCAA, Porc = PorcCCAA * 100)
votos <- prov %>% group_by(Partido) %>%
select(Partido, VotosCCAA, PorcCCAA*100) %>% distinct() %>% ungroup() %>%
rename(Votos = VotosCCAA, Porc = PorcCCAA)
votos <- prov %>% group_by(Partido) %>%
select(Partido, VotosCCAA, PorcCCAA) %>% distinct() %>% ungroup() %>% mutate(PorcCCAA = PorcCCAA*100)
View(votos)
View(votos)
prov %>% group_by(Partido) %>%
select(Partido, VotosCCAA, PorcCCAA) %>% distinct()
datos_votos <- datos %>%
group_by(Provincia, Municipio) %>% mutate(PorcMuni = VotosMuni/sum(VotosMuni)*100) %>%
group_by(Provincia, Partido) %>% mutate(Votos = sum(VotosMuni)) %>%
group_by(Partido) %>% mutate(VotosCCAA = sum(VotosMuni))
votos <- datos_votos %>% group_by(Partido) %>%
select(Partido, VotosCCAA, PorcCCAA) %>% distinct() %>% ungroup() %>%
rename(Votos = VotosCCAA, Porc = PorcCCAA)
datos_votos <- datos %>%
group_by(Provincia, Municipio) %>% mutate(PorcMuni = VotosMuni/sum(VotosMuni)*100) %>%
group_by(Provincia, Partido) %>% mutate(Votos = sum(VotosMuni)) %>%
group_by(Partido) %>% mutate(VotosCCAA = sum(VotosMuni))
votos <- datos_votos %>% group_by(Partido) %>%
select(Partido, VotosCCAA) %>% distinct() %>% ungroup() %>%
rename(Votos = VotosCCAA)
View(votos)
View(votos)
votos %>% filter(Partido == "Votos en blanco" | Partido == "Votos nulos")
?filter
votos <- filter(Partido != "Votos en blanco" & Partido != "Votos nulos")
bn <- votos %>% filter(Partido == "Votos en blanco" | Partido == "Votos nulos")
votos <- votos %>% filter(Partido != "Votos en blanco" & Partido != "Votos nulos")
votos <- votos %>% bind_rows(bn)
View(votos)
runApp()
runApp()
runApp()
datos_votos
datos_votos %>% group_by(Partido) %>%
select(Partido, VotosCCAA) %>% distinct() %>% ungroup() %>%
rename(Votos = VotosCCAA)
votos
runApp()
View(votos)
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?write.table
"3" +"h"
clean <- function(df) {
df$Partido <- factor(gsub('\\.', "", df$Partido))
df$Censo <- as.integer(gsub('\\.', "", as.character(df$Censo)))
df$Provincia <- gsub('Á', 'A', as.character(df$Provincia))
df$Provincia <- gsub('É', 'E', as.character(df$Provincia))
df$Provincia <- gsub('Í', 'I', as.character(df$Provincia))
df$Provincia <- gsub('Ó', 'O', as.character(df$Provincia))
df$Provincia <- gsub('Ú', 'U', as.character(df$Provincia))
df$Municipio <- gsub('Á', 'A', as.character(df$Municipio))
df$Municipio <- gsub('É', 'E', as.character(df$Municipio))
df$Municipio <- gsub('Í', 'I', as.character(df$Municipio))
df$Municipio <- gsub('Ó', 'O', as.character(df$Municipio))
df$Municipio <- gsub('Ú', 'U', as.character(df$Municipio))
df$Partido <-
as.factor(gsub('ñ', 'n', as.character(df$Partido)))
df$Partido <-
as.factor(gsub('Ñ', 'N', as.character(df$Partido)))
df$Partido <-
as.factor(gsub(' ', '', as.character(df$Partido)))
df$Partido <-
as.factor(gsub(
'.*PODEMOS.*',
'Podemos',
as.character(df$Partido),
ignore.case = T
))
df$Partido <-
as.factor(gsub('.*IU.*', 'IU', as.character(df$Partido)))
df$Partido <-
as.factor(gsub('.*PNC.*', 'PNC', as.character(df$Partido), ignore.case = T))
df$Partido <-
as.factor(gsub('APB.*', 'APB', as.character(df$Partido))) # cuidado
df$Partido <-
as.factor(gsub('AP-.*', 'AP', as.character(df$Partido)))
df$Partido <-
as.factor(gsub('AP', 'AP', as.character(df$Partido)))
df$Partido <-
as.factor(gsub('.*PSOE.*', 'PSOE', as.character(df$Partido)))
df$Partido <-
as.factor(gsub('.*PREPAL.*', 'PREPAL', as.character(df$Partido)))
df$Partido <-
as.factor(gsub('.*PCE.*', 'PCE', as.character(df$Partido)))
df$Partido <-
as.factor(gsub('.*TC.*', 'PCAS', as.character(df$Partido)))
df$Partido <-
as.factor(gsub('.*PCAL.*', 'PCAS', as.character(df$Partido)))
df$Partido <-
as.factor(gsub('.*UPSA.*', 'UPSa', as.character(df$Partido)))
df$Partido <-
as.factor(gsub('.*PTE.*', 'PTE', as.character(df$Partido)))
df$Partido <-
as.factor(gsub('.*URCL.*', 'URCL', as.character(df$Partido)))
df$Partido <-
as.factor(gsub('.*CDS.*', 'CDS', as.character(df$Partido)))
return(df)
}
# como cambia según la entrada, esta función sirve para leer los datos y devolver
# los datos limpios
read_and_clean <- function(datos) {
datos <-
read.table(
cat("./resultados/", datos, ".csv", sep=""),
header = T,
sep = ";",
dec = ",",
stringsAsFactors = T
)
datos <- clean(datos)
write.table(
datos,
file = cat("./resultados_limpios/", datos, ".csv", sep=""),
sep = ";",
quote = F,
dec = ","
)
}
anios <- as.character(c(1983, 1987, 1991, 1995, 1999, 2003, 2007, 2011, 2015, 2019, 2022))
length(anios)
setwd("~/OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/EstudioElectoralCyL")
for (i in 1:length(anios)){
read_and_clean(anios[i])
}
cat("./resultados/", anios[1], ".csv", sep="")
read.table(
cat("./resultados/", anios[1], ".csv", sep=""),
header = T,
sep = ";",
dec = ",",
stringsAsFactors = T
)
read.table(
cat("./resultados/", anios[1], ".csv", sep=""),
header = T,
sep = ";",
dec = ",",
stringsAsFactors = T
)
# como cambia según la entrada, esta función sirve para leer los datos y devolver
# los datos limpios
read_and_clean <- function(datos) {
datos <-
read.table(
paste("./resultados/", datos, ".csv", sep=""),
header = T,
sep = ";",
dec = ",",
stringsAsFactors = T
)
datos <- clean(datos)
write.table(
datos,
file = cat("./resultados_limpios/", datos, ".csv", sep=""),
sep = ";",
quote = F,
dec = ","
)
}
anios <- as.character(c(1983, 1987, 1991, 1995, 1999, 2003, 2007, 2011, 2015, 2019, 2022))
for (i in 1:length(anios)){
read_and_clean(anios[i])
}
# como cambia según la entrada, esta función sirve para leer los datos y devolver
# los datos limpios
read_and_clean <- function(datos) {
datos <-
read.table(
paste("./resultados/", datos, ".csv", sep=""),
header = T,
sep = ";",
dec = ",",
stringsAsFactors = T
)
datos <- clean(datos)
write.table(
datos,
file = paste("./resultados_limpios/", datos, ".csv", sep=""),
sep = ";",
quote = F,
dec = ","
)
}
anios <- as.character(c(1983, 1987, 1991, 1995, 1999, 2003, 2007, 2011, 2015, 2019, 2022))
for (i in 1:length(anios)){
read_and_clean(anios[i])
}
for (i in 1:length(anios)){
read_and_clean(anios[i])
}
?write.table
for (i in 1:length(anios)){
read_and_clean(anios[i])
}
# como cambia según la entrada, esta función sirve para leer los datos y devolver
# los datos limpios
read_and_clean <- function(datos) {
datos <-
read.table(
paste("./resultados/", datos, ".csv", sep=""),
header = T,
sep = ";",
dec = ",",
stringsAsFactors = T
)
datos <- clean(datos)
browser()
write.table(
datos,
file = paste("./resultados_limpios/", datos, ".csv", sep=""),
sep = ";",
quote = F,
dec = ","
)
}
anios <- as.character(c(1983, 1987, 1991, 1995, 1999, 2003, 2007, 2011, 2015, 2019, 2022))
for (i in 1:length(anios)){
read_and_clean(anios[i])
}
datos
# como cambia según la entrada, esta función sirve para leer los datos y devolver
# los datos limpios
read_and_clean <- function(n_datos) {
datos <-
read.table(
paste("./resultados/", datos, ".csv", sep=""),
header = T,
sep = ";",
dec = ",",
stringsAsFactors = T
)
datos <- clean(datos)
write.table(
datos,
file = paste("./resultados_limpios/", n_datos, ".csv", sep=""),
sep = ";",
quote = F,
dec = ","
)
}
anios <- as.character(c(1983, 1987, 1991, 1995, 1999, 2003, 2007, 2011, 2015, 2019, 2022))
for (i in 1:length(anios)){
read_and_clean(anios[i])
}
# como cambia según la entrada, esta función sirve para leer los datos y devolver
# los datos limpios
read_and_clean <- function(n_datos) {
datos <-
read.table(
paste("./resultados/", n_datos, ".csv", sep=""),
header = T,
sep = ";",
dec = ",",
stringsAsFactors = T
)
datos <- clean(datos)
write.table(
datos,
file = paste("./resultados_limpios/", n_datos, ".csv", sep=""),
sep = ";",
quote = F,
dec = ","
)
}
anios <- as.character(c(1983, 1987, 1991, 1995, 1999, 2003, 2007, 2011, 2015, 2019, 2022))
for (i in 1:length(anios)){
read_and_clean(anios[i])
}
runApp()
runApp()
runApp()
runApp()
setwd("~/OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/EstudioElectoralCyL")
shiny::runApp()
setwd("~/OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL")
library(ggplot2); library(dplyr)
library(sf)
library(plotly)
muni_geo <- read_sf("./municipios/au.muni_cyl_recintos.shp") %>% rename(Municipio = nombre)
muni_geo$Municipio <- muni_geo$Municipio %>% toupper() %>%
gsub('Ã', 'A', .) %>% gsub('Ã', 'E', .) %>% gsub('Ã', 'I', .) %>%
gsub('Ã', 'O', .) %>% gsub('Ã', 'U', .)
View(muni_geo)
colnames(muni_geo)
setwd("~/OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/EstudioElectoralCyL")
?arrange
runApp()
runApp()
runApp()
runApp()
runApp()
?sf
