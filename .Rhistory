install.packages("ggplot2")
install.packages("plotly")
install.packages(c("cli", "curl", "htmltools", "htmlwidgets", "isoband", "later", "nlme", "openssl", "pillar", "R6", "Rcpp", "survival", "tibble", "utf8"))
install.packages(c("gert", "pkgload", "waldo", "xfun"))
library(installr)
updateR()
install.packages(c("cpp11", "digest", "gert", "lattice", "lifecycle", "mgcv", "pillar", "R.utils", "xfun", "XML"))
?aes
?ggplot2::aes
?ggplot2::geom_bar
12/2+c(-1,1)*1.96*sqrt(12)/2
6-12/2/(sqrt(12)/2)
pnorm(.95)
pnorm(.975)
qnorm(.95)
qnorm(.975)
6-12/2
6-12/2/(sqrt(12)/2)
(6-12/2)/(sqrt(12)/2)
gente <- sample(1:365, 25, replace = T)
gente
hay <- any(duplicated(gente))
duplicated(gente)
repeticiones <- replicate(100, paradoja(23))
paradoja <- function(cantidad)
{
gente <- sample(1:365, cantidad, replace = T)
hay <- any(duplicated(gente))
return(hay)
}
repeticiones <- replicate(100, paradoja(23))
probabilidad <- cumsum(repeticiones)/1:100
probabilidad
?plot
plot(repeticiones, probabilidad, xlab="repeticiones", ylab="probabilidad acumulada")
plot(1:vecess, probabilidad, xlab="repeticiones", ylab="probabilidad acumulada")
plot(1:veces, probabilidad, xlab="repeticiones", ylab="probabilidad acumulada")
veces <- 100
repeticiones <- replicate(veces, paradoja(23))
probabilidad <- cumsum(repeticiones)/1:veces
plot(1:veces, probabilidad, xlab="repeticiones", ylab="probabilidad acumulada")
plot(1:veces, probabilidad, xlab="repeticiones", ylab="probabilidad acumulada", type = "l")
plot(1:veces, probabilidad, xlab="repeticiones", ylab="probabilidad acumulada",
type = "l", ylim = c(0, 1))
?plot
axis(side=2, at=0.5)
plot(1:veces, probabilidad, xlab="repeticiones", ylab="probabilidad acumulada",
type = "l", ylim = c(0, 1), yaxp=c(0, 1, .5))
plot(1:veces, probabilidad, xlab="repeticiones", ylab="probabilidad acumulada",
type = "l", ylim = c(0, 1), yaxt = F)
plot(1:veces, probabilidad, xlab="repeticiones", ylab="probabilidad acumulada",
type = "l", ylim = c(0, 1), yaxt = "n")
axis(side=2, at0.5)
axis(side=2, at=0.5)
abline(h=0.5, lty=2)
paradoja <- function(cantidad)
{
gente <- sample(1:365, cantidad, replace = T)
hay <- any(duplicated(gente))
return(hay)
}
veces <- 200
repeticiones <- replicate(veces, paradoja(23))
probabilidad <- cumsum(repeticiones)/1:veces
plot(1:veces, probabilidad, xlab="repeticiones", ylab="probabilidad acumulada",
type = "l", ylim = c(0, 1), yaxt = "n")
axis(side=2, at=0.5)
abline(h=0.5, lty=2)
plot(1:veces, probabilidad, xlab="repeticiones", ylab="probabilidad acumulada",
type = "l", ylim = c(0, 1), yaxt = "n", title="Paradoja del cumpleaños")
plot(1:veces, probabilidad, xlab="repeticiones", ylab="probabilidad acumulada",
type = "l", ylim = c(0, 1), yaxt = "n", main="Paradoja del cumpleaños")
axis(side=2, at=0.5)
abline(h=0.5, lty=2)
axis(side=2, at=c(0, .5, 1))
paradoja <- function(cantidad)
{
gente <- sample(1:365, cantidad, replace = T)
hay <- any(duplicated(gente))
return(hay)
}
veces <- 200
repeticiones <- replicate(veces, paradoja(50))
probabilidad <- cumsum(repeticiones)/1:veces
plot(1:veces, probabilidad, xlab="repeticiones", ylab="probabilidad acumulada",
type = "l", ylim = c(0, 1), yaxt = "n", main="Paradoja del cumpleaños")
axis(side=2, at=c(0, .5, 1))
abline(h=0.5, lty=2)
paradoja <- function(cantidad)
{
gente <- sample(1:365, cantidad, replace = T)
hay <- any(duplicated(gente))
return(hay)
}
veces <- 200
repeticiones <- replicate(veces, paradoja(100))
probabilidad <- cumsum(repeticiones)/1:veces
plot(1:veces, probabilidad, xlab="repeticiones", ylab="probabilidad acumulada",
type = "l", ylim = c(0, 1), yaxt = "n", main="Paradoja del cumpleaños")
axis(side=2, at=c(0, .5, 1))
abline(h=0.5, lty=2)
paradoja <- function(cantidad)
{
gente <- sample(1:365, cantidad, replace = T)
hay <- any(duplicated(gente))
return(hay)
}
veces <- 200
repeticiones <- replicate(veces, paradoja(10))
probabilidad <- cumsum(repeticiones)/1:veces
plot(1:veces, probabilidad, xlab="repeticiones", ylab="probabilidad acumulada",
type = "l", ylim = c(0, 1), yaxt = "n", main="Paradoja del cumpleaños")
axis(side=2, at=c(0, .5, 1))
abline(h=0.5, lty=2)
plot(1:veces, probabilidad, xlab="repeticiones", ylab="probabilidad estimada",
type = "l", ylim = c(0, 1), yaxt = "n", main="Paradoja del cumpleaños")
axis(side=2, at=c(0, .5, 1))
abline(h=0.5, lty=2)
paradoja <- function(cantidad)
{
gente <- sample(1:365, cantidad, replace = T)
hay <- any(duplicated(gente))
return(hay)
}
veces <- 200
repeticiones <- replicate(veces, paradoja(23))
probabilidad <- cumsum(repeticiones)/1:veces
plot(1:veces, probabilidad, xlab="repeticiones", ylab="probabilidad estimada",
type = "l", ylim = c(0, 1), yaxt = "n", main="Paradoja del cumpleaños")
axis(side=2, at=c(0, .5, 1))
abline(h=0.5, lty=2)
veces <- 5000
repeticiones <- replicate(veces, paradoja(23))
probabilidad <- cumsum(repeticiones)/1:veces
plot(1:veces, probabilidad, xlab="repeticiones", ylab="probabilidad estimada",
type = "l", ylim = c(0, 1), yaxt = "n", main="Paradoja del cumpleaños")
axis(side=2, at=c(0, .5, 1))
abline(h=0.5, lty=2)
paradoja <- function(cantidad)
{
gente <- sample(1:365, cantidad, replace = T)
hay <- any(duplicated(gente))
return(hay)
}
veces <- 500
repeticiones <- replicate(veces, paradoja(9))
probabilidad <- cumsum(repeticiones)/1:veces
plot(1:veces, probabilidad, xlab="repeticiones", ylab="probabilidad estimada",
type = "l", ylim = c(0, 1), yaxt = "n", main="Paradoja del cumpleaños")
axis(side=2, at=c(0, .5, 1))
abline(h=0.5, lty=2)
tail(probabilidad)
paradoja <- function(cantidad)
{
gente <- sample(1:365, cantidad, replace = T)
hay <- any(duplicated(gente))
return(hay)
}
veces <- 500
repeticiones <- replicate(veces, paradoja(100))
probabilidad <- cumsum(repeticiones)/1:veces
plot(1:veces, probabilidad, xlab="repeticiones", ylab="probabilidad estimada",
type = "l", ylim = c(0, 1), yaxt = "n", main="Paradoja del cumpleaños")
axis(side=2, at=c(0, .5, 1))
abline(h=0.5, lty=2)
mice <- data.frame()
mice <- data.frame(
stillb=c(15,17),
total=c(297,242),
conc=c(0,62)
)
mice$resp <- cbind(mice$stillb, mice$total-mice$stillb)
mice
View(mice)
mice$resp
cbind(c(1,2), c(2,3))
rbind(c(1,2), c(2,3))
cbind(c(1,2), c(2,3))
data.frame(res=cbind(c(1,2), c(2,3)))
View(data.frame(res=cbind(c(1,2), c(2,3))))
help(offset)
?anova
install.packages(c("brio", "cli", "cpp11", "crayon", "credentials", "crosstalk", "data.table", "desc", "devtools", "diffobj", "digest", "fs", "generics", "gert", "glue", "knitr", "memoise", "mime", "pillar", "pkgbuild", "pkgload", "plotly", "rcmdcheck", "remotes", "rlang", "sessioninfo", "sp", "stringi", "testthat", "tibble", "tidyr", "tinytex", "usethis", "withr", "xfun", "xml2"))
qchisq(8.7912-8.4351, 1, lower.tail = T)
install.packages("tinytex")
system.file("examples", package = "shiny")
library(shiny)
runExample("01_Hello")
runExample("02_Text")
install.packages(c("cli", "clipr", "colorspace", "commonmark", "desc", "evaluate", "glue", "jsonlite", "klaR", "mockery", "openssl", "Rcpp", "rlang", "rmarkdown", "sf", "survival", "tidyselect", "withr", "xfun", "XML", "yaml"))
install.packages(c("cli", "clipr", "colorspace", "commonmark", "desc", "evaluate", "glue", "jsonlite", "klaR", "mockery", "openssl", "Rcpp", "rlang", "rmarkdown", "sf", "survival", "tidyselect", "withr", "xfun", "XML", "yaml"))
install.packages(c("cli", "clipr", "colorspace", "commonmark", "desc", "evaluate", "glue", "jsonlite", "klaR", "mockery", "openssl", "Rcpp", "rlang", "rmarkdown", "sf", "survival", "tidyselect", "withr", "xfun", "XML", "yaml"))
shiny::runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/EstudioElectoralCyL')
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/EstudioElectoralCyL')
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/EstudioElectoralCyL')
shiny::runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/EstudioElectoralCyL')
c(120000, 100000) %% 62400
shiny::runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/EstudioElectoralCyL')
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/EstudioElectoralCyL')
provincia
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/EstudioElectoralCyL')
runApp('OneDrive - Universidad de Valladolid/TFG Estadística/Estudio electoral CyL/EstudioElectoralCyL')
